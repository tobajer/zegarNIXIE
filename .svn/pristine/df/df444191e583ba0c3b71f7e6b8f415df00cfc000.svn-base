/******************** (C) COPYRIGHT 2007 STMicroelectronics ********************
* File Name          : stm32f10x_it.c
* Author             : MCD Application Team
* Date First Issued  : 02/05/2007
* Description        : Main Interrupt Service Routines.
*                      This file can be used to describe all the exceptions 
*                      subroutines that may occur within user application.
*                      When an interrupt happens, the software will branch 
*                      automatically to the corresponding routine.
*                      The following routines are all empty, user can write code 
*                      for exceptions handlers and peripherals IRQ interrupts.
********************************************************************************
* History:
* 05/21/2007: V0.3
* 04/02/2007: V0.2
* 02/05/2007: V0.1
********************************************************************************
* THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
* WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
* AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
* INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
* CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
* INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
*******************************************************************************/

/* Includes ------------------------------------------------------------------*/
#include "stm32f10x_it.h"
#include "system_init.h"
#include "RTC_TimeAndCallendar.h"
#include "Biblioteka_Kalendarz.h"
#include "main.h"
#include "board.h"
#include "eeprom.h"
#include "basic_math.h"
/* Private typedef -----------------------------------------------------------*/

/* Private define ------------------------------------------------------------*/
#define BUT_TINT_N	10
#define CZAS_OA		4	//czas wyswietlania alarmu w sekundach
#define CZAS_BNA	65	//czas w sekundach (musi byæ min. 60)
#define LICZBA_MELODII	4//
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
//int32_t Takceptacja = -1;
uint8_t program=0, w;
uint16_t pelna_nuta = 2000;
extern volatile uint8_t Buzzer_aktywny;	//aktywny alarm budzika
int32_t TimerOA;	//timer Odczyt Alarmow
int32_t TimerBNA;	//timer Buzzer Nie Aktywny
extern uint32_t DrvKrokPeriod;
/* external variables definitions --------------------------------------------*/
extern volatile TrybTypeDef eTrybPracy;
extern volatile int tik;
extern volatile int Tmux, nuta_fade;
extern volatile int32_t DrvKrokCount;
extern volatile int32_t pozycja_wskazowki;
BibKal_TimeTypeDef RTC_ActualTimeStruct, RTC_AlarmTimeStruct;
BibKal_CalendarTypeDef RTC_ActualCallendarStruct;
BibKal_AlarmTypeDef RTC_Budzik[7], RTC_BudzikTemp;
extern uint16_t VirtAddVarTab[];
extern BuzzerTypeDef BuzzerSelect;
extern BuzzerTypeDef BuzzerAccept;
extern BuzzerTypeDef BuzzerAlarm;

enum nuta{
	c0 = 131,
	cis0 = 139,
	d0 = 147,
	dis0 = 156,
	e0 = 165,
	f0 = 175,
	fis0 = 185,
	g0 = 196,
	gis0 = 208,
	a0 = 220,
	b0 = 232,
	h0 = 247,
	c1 = 262,
	cis1 = 277,
	d1 = 294,
	dis1 = 311,
	e1 = 330,
	f1 = 349,
	fis1 = 370,
	g1 = 392,
	gis1 = 415,
	a1 = 440,
	b1 = 466,
	h1 = 494,
	c2 = 523,
	cis2 = 554,
	d2 = 587,
	dis2 = 622,
	e2 = 659,
	f2 = 698,
	fis2 = 740,
	g2 = 784,
	gis2 = 831,
	a2 = 880,
	b2 = 932,
	h2 = 988,
	c3 = 1046,
	cis3 = 1109,
	d3 = 1175,
	dis3 = 1244,
	e3 = 1318,
	f3 = 1397,
	fis3 = 1480,
	g3 = 1568,
	end = 65535
};

/*
 * 3 LSB -> czas nuty: 0=nic, 1=pelna, 2=pol, 3=cwierc, 4=osemka, 5=szesnastka, 6=32, 7=64
 */

/*melodia1: Dla Elizy / Beethoven*/
uint16_t melodia2[]={2000, e2,8,dis2,8,e2,8,dis2,8,e2,8,h1,8,d2,8,c2,8,a1,4,1,8,c1,8,e1,8,a1,8,h1,4,1,8,e1,8,gis1,8,h1,8,c2,4,1,8,e1,8,e2,8,dis2,8,e2,8,dis2,8,e2,8,h1,8,d2,8,c2,8,a1,4,1,8,c1,8,e1,8,a1,8,h1,4,1,8,e1,8,c2,8,h1,8,a1,2,end};
/*Benny Hill / Yakety Sax https://www.musicnotes.com/sheetmusic/mtd.asp?ppn=MN0106276*/
uint16_t melodia3[]={1300, a1,2,a1,16,c2,4,c2,4,a1,8,g1,8,e1,8,e1,8,g1,8,g1,8,a1,8,g1,8,g1,8,e1,8,d1,8,c1,8,  c1,4,c1,8,e1,8,e1,8,g1,8,a1,8,g1,8, c2,4,1,4,g1,8,a1,8,h1,8, c2,4,c2,4,a1,8,g1,8,e1,8,e1,8, g1,8,g1,8,a1,8,g1,8,g1,8,e1,8,d1,8,c1,8, g1,4,g1,8,g1,8,h1,8,d2,8,h1,8,a1,8, g1,4,1,4,0,8,g1,8,a1,8,h1,8, c2,4,c2,4,c2,4,c2,4, c2,4,c2,4,a1,8,g1,8,e1,8,c1,8, f1,4,f1,4,f1,4,f1,4, a1,4,c2,8,d2,8,dis2,8,c2,4,1,8, e2,8,dis2,8,e2,8,dis2,8,e2,8,g2,4,1,8, e2,8,g2,8,e2,4,c2,4,g1,4, a2,8,e2,4,c2,8,d2,4,c2,4,1,2,end};
/*Koko koko euro spoko*/
uint16_t melodia1[]={
		1500,
		g1,4,g1,4,d1,4,f1,4, e1,8,c1,3,1,4,1,8,0,2, c2,4,c2,4,f1,4,a1,4, a1,8,c1,4,1,8,0,2, c2,4,c2,4,f1,4,a1,4,
		a1,8,g1,4,1,8,1,4, e1,4,g1,4,d1,4,f1,4, e1,8,g1,4,1,8,1,4, c2,4,c2,4,f1,4,a1,4, a1,8,g1,4,1,8,1,4, e1,4,g1,4,d1,4,f1,4,
		e1,8,c1,4,1,8,1,4, c1,8,c1,8,c1,8,c1,8,c1,8,e1,8,g1,8,e1,8, f1,8,f1,8,f1,8,f1,8,f1,8,a1,8,c2,8,a1,8, c1,8,c1,8,c1,8,c1,8,c1,8,e1,8,g1,8,e1,8, g1,8,f1,8,e1,8,d1,8,c1,4,c1,4,
		c1,8,c1,8,c1,8,c1,8,c1,8,e1,8,g1,8,e1,8, f1,8,f1,8,f1,8,f1,8,f1,8,a1,8,c2,8,a1,8, c1,8,c1,8,c1,8,c1,8,c1,8,e1,8,g1,8,e1,8, g1,8,f1,8,e1,8,d1,8,c1,4,c1,4,
		g0,8,g0,8,g0,8,g0,8,g0,8,h0,8,d1,8,h0,8, c1,8,c1,8,c1,8,c1,8,c1,8,e1,8,g1,8, g0,8,g0,8,g0,8,g0,8,g0,8,h0,8,d1,8,h0,8, g1,8,g1,8,a1,8,h1,8,c2,4,c2,4,1,1,
	end};
uint16_t melodia4[]={2000, c1,1,d1,1,e1,1,c1,1,d1,1,e1,1,c1,1,d1,1,end};
int32_t Muzyka;
uint16_t *melodie[LICZBA_MELODII+1]={0,melodia1,melodia2,melodia3,melodia4};
uint16_t idx_nuta_dzwiek;


/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

/*******************************************************************************
* Function Name  : NMIException
* Description    : This function handles NMI exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
}

/*******************************************************************************
* Function Name  : HardFaultException
* Description    : This function handles Hard Fault exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void)
{
}

/*******************************************************************************
* Function Name  : MemManageException
* Description    : This function handles Memory Manage exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void)
{
}

/*******************************************************************************
* Function Name  : BusFaultException
* Description    : This function handles Bus Fault exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void)
{
}

/*******************************************************************************
* Function Name  : UsageFaultException
* Description    : This function handles Usage Fault exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void)
{
}

/*******************************************************************************
* Function Name  : DebugMonitor
* Description    : This function handles Debug Monitor exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
}

/*******************************************************************************
* Function Name  : SVCHandler
* Description    : This function handles SVCall exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
}

/*******************************************************************************
* Function Name  : PendSVC
* Description    : This function handles PendSVC exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
}

/*******************************************************************************
* Function Name  : SysTickHandler
* Description    : This function handles SysTick Handler.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_Handler(void)
{
//  GPIO_WriteBit(LED_GPIO, LED, (BitAction)(1-GPIO_ReadOutputDataBit(LED_GPIO, LED)));

}

/*******************************************************************************
* Function Name  : WWDG_IRQHandler
* Description    : This function handles WWDG interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : PVD_IRQHandler
* Description    : This function handles PVD interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : TAMPER_IRQHandler
* Description    : This function handles Tamper interrupt request. 
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : RTC_IRQHandler
* Description    : This function handles RTC global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
	BuzzerTypeDef BuzzerStruct;
	if (RTC_GetITStatus(RTC_IT_SEC) != RESET)
	{
		//on board LED
		GPIO_WriteBit(GPIOC, GPIO_Pin_13, (BitAction)(1-GPIO_ReadOutputDataBit(GPIOC, GPIO_Pin_13)));
		RTC_GetTime(&RTC_ActualTimeStruct);
		RTC_GetCalendar(&RTC_ActualCallendarStruct, 0);
		tik = 1;

		//sprawdzanie budzika/alarmu
		if (RTC_Budzik[RTC_ActualCallendarStruct.WDAY].HOUR != 0 &&
			RTC_Budzik[RTC_ActualCallendarStruct.WDAY].MIN != 0
			)
		{
			if( Muzyka <= 0 &&
				TimerBNA <= 0 &&
				Buzzer_aktywny &&
				RTC_Budzik[RTC_ActualCallendarStruct.WDAY].HOUR == RTC_ActualTimeStruct.HOUR &&
				RTC_Budzik[RTC_ActualCallendarStruct.WDAY].MIN == RTC_ActualTimeStruct.MIN
			   )
			{

				Muzyka = random8L(sizeof(*melodie)/sizeof(*melodie[0])-2)+1;
				idx_nuta_dzwiek = 1;
				pelna_nuta = melodie[Muzyka][0];	//tempo utworu
				BuzzerStruct.FREQ = 500;
				BuzzerStruct.PERIOD = 1;
				Buzzer_init(&BuzzerStruct);
				Buzzer_start();
			}
		}

		if (TimerBNA > 0)
		{
			TimerBNA--;
		}
		else if (TimerBNA == 0)
		{
			Buzzer_aktywny = 1;		//automatycznie uzbroj alarm po czasie TimerBNA
			TimerBNA = -1;			//dezaktywacja TimerBNA
		}

		if (TimerOA > 0)
		{
			TimerOA--;
		}
		else if(TimerOA == 0)
		{
			eTrybPracy = ZEGAR;		//przelacz tryb pracy na ZEGAR po okresleonym czasie wyswietlania alarmow
			TimerOA = -1;			//wylaczenie timera
		}

		RTC_ClearITPendingBit(RTC_IT_SEC);
	}
}

/*******************************************************************************
* Function Name  : FLASH_IRQHandler
* Description    : This function handles Flash interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : RCC_IRQHandler
* Description    : This function handles RCC interrupt request. 
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : EXTI0_IRQHandler
* Description    : This function handles External interrupt Line 0 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : EXTI1_IRQHandler
* Description    : This function handles External interrupt Line 1 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : EXTI2_IRQHandler
* Description    : This function handles External interrupt Line 2 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : EXTI3_IRQHandler
* Description    : This function handles External interrupt Line 3 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : EXTI4_IRQHandler
* Description    : This function handles External interrupt Line 4 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : DMAChannel1_IRQHandler
* Description    : This function handles DMA Stream 1 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMAChannel1_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : DMAChannel2_IRQHandler
* Description    : This function handles DMA Stream 2 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMAChannel2_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : DMAChannel3_IRQHandler
* Description    : This function handles DMA Stream 3 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMAChannel3_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : DMAChannel4_IRQHandler
* Description    : This function handles DMA Stream 4 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMAChannel4_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : DMAChannel5_IRQHandler
* Description    : This function handles DMA Stream 5 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMAChannel5_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : DMAChannel6_IRQHandler
* Description    : This function handles DMA Stream 6 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMAChannel6_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : DMAChannel7_IRQHandler
* Description    : This function handles DMA Stream 7 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMAChannel7_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : ADC_IRQHandler
* Description    : This function handles ADC global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_IRQHandler(void)
{

//	if(ADC_GetITStatus(ADC1, ADC_IT_AWD) != RESET)
//	{
	//	GPIO_WriteBit(BL_GPIO, BLR, (BitAction)(1-GPIO_ReadOutputDataBit(BL_GPIO, BLR)));

	    /* Clear the EXTI line 0 pending bit */
//	    ADC_ClearITPendingBit(ADC1, ADC_IT_AWD);
//	}
}

/*******************************************************************************
* Function Name  : USB_HP_CAN_TX_IRQHandler
* Description    : This function handles USB High Priority or CAN TX interrupts 
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : USB_LP_CAN_RX0_IRQHandler
* Description    : This function handles USB Low Priority or CAN RX0 interrupts 
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : CAN_RX1_IRQHandler
* Description    : This function handles CAN RX1 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : CAN_SCE_IRQHandler
* Description    : This function handles CAN SCE interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : EXTI9_5_IRQHandler
* Description    : This function handles External lines 9 to 5 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
	Delay_L(889 * 20);	//~20ms debounce

	//przerwanie button RED
	if(EXTI_GetITStatus(BUTTON_RED_EXTI) != RESET)
	{
		if (GPIO_ReadInputDataBit(BUTTON_RED_PORT, BUTTON_RED) == Bit_RESET)
		{
			switch (eTrybPracy)
			{
				case ZEGAR:
					eTrybPracy = USTAW_ZEGAR_GODZINA;
					break;
				case USTAW_ZEGAR_GODZINA:
					//przejdz do podtrybu ustawiania minut
					eTrybPracy = USTAW_ZEGAR_MINUTA;
					break;
				case USTAW_ZEGAR_MINUTA:
					//zresetuj kalendarz na 2 styczeñ 2000 r. (niedziela, czyli wartosc 0)
//					RTC_GetCalendar(&RTC_ActualCallendarStruct, 0);	//pobierz aktualn¹ datê
//					RTC_ActualCallendarStruct.DAY = 1;
//					RTC_ActualCallendarStruct.MONTH = 1;
//					RTC_ActualCallendarStruct.YEAR = 0;
//					RTC_SetCalendar(&RTC_ActualCallendarStruct);	//aktualizuj datê
					//przejdz do podtrybu ustawiania dnia tygodnia
					eTrybPracy = USTAW_ZEGAR_WDAY;
					break;
				case USTAW_ZEGAR_WDAY:
					eTrybPracy = ZEGAR;	//wyjdz z ustawien
					break;
				case USTAW_ALARM_GODZINA:
					eTrybPracy = USTAW_ALARM_MINUTA;	//wyjdz z ustawien
					break;
				case USTAW_ALARM_MINUTA:
					//zapisz budzik do macierzy podrecznej
					RTC_Budzik[RTC_BudzikTemp.WDAY].HOUR = RTC_BudzikTemp.HOUR;
					RTC_Budzik[RTC_BudzikTemp.WDAY].MIN = RTC_BudzikTemp.MIN;
					//zapisz budzik w pamieci FLASH
					FLASH_Unlock();
					EE_WriteVariable(VirtAddVarTab[RTC_BudzikTemp.WDAY], ((uint16_t)RTC_BudzikTemp.HOUR << 8) + RTC_BudzikTemp.MIN);
					FLASH_Lock();
					eTrybPracy = ZEGAR;	//wyjdz z ustawien
					break;
				case USTAW_KALIBRACJA:
					eTrybPracy = ZEGAR;	//wyjdz z ustawien
					break;
				case ODCZYT_ALARMU:
					RTC_BudzikTemp.WDAY = w;
					TimerOA = -1;
					eTrybPracy = USTAW_ALARM_GODZINA;
					break;
				default:
					break;

			}
			Buzzer_init(&BuzzerAccept);
			Buzzer_start();
		}//endif (GPIO_ReadInputDataBit(BUTTON_RED_PORT, BUTTON_RED) == Bit_RESET)

		EXTI_ClearITPendingBit(BUTTON_RED_EXTI);
	}

	//przerwanie button BLACK
	else if(EXTI_GetITStatus(BUTTON_BLACK_EXTI) != RESET)
	{
		if (GPIO_ReadInputDataBit(BUTTON_BLACK_PORT, BUTTON_BLACK) == Bit_RESET)
		{
			Muzyka = 0;	//wylacz muzyke jesli gra w trakcie alarmu
			//akcja na przycisniecie przycisku czarnego
			switch (eTrybPracy)
			{
				case ZEGAR:
					//tu np. akcja na w³¹czenie alarmu/budzika

					//sprawdzenie nastawow budzikow
					w = RTC_ActualCallendarStruct.WDAY;		//najpierw wyswietl alarm na dzisiejszy dzien
					TimerOA = CZAS_OA;		//ustaw czas wyswietlania informacji o alarmach
					TimerBNA = CZAS_BNA;	//dezaktywacja buzzer'a po zalaczeniu sie budzika/alarmu
					Buzzer_aktywny = 0;		//wylacz dzwiek alarmu
					eTrybPracy = ODCZYT_ALARMU;

					break;
				case USTAW_ZEGAR_GODZINA:
					//w trybie ustawiania zegara, czerwony przycisk zwieksza godziny
	   				RTC_GetTime(&RTC_ActualTimeStruct);
	   				RTC_ActualTimeStruct.HOUR += 1;
	   				if (RTC_ActualTimeStruct.HOUR >23)
	   					RTC_ActualTimeStruct.HOUR = 0;
	   				RTC_SetTime(&RTC_ActualTimeStruct);
					break;
				case USTAW_ZEGAR_MINUTA:
					//w trybie ustawiania zegara, czarny przycisk zwieksza minuty i zeruje sekundy
					//akceptacja przyciskiem czerwonym
	   				RTC_GetTime(&RTC_ActualTimeStruct);
	   				RTC_ActualTimeStruct.SEC = 0;
	   				RTC_ActualTimeStruct.MIN += 1;
	   				if (RTC_ActualTimeStruct.MIN >59)
	   					RTC_ActualTimeStruct.MIN = 0;
	   				RTC_SetTime(&RTC_ActualTimeStruct);
					break;
				case USTAW_ZEGAR_WDAY:
					RTC_GetCalendar(&RTC_ActualCallendarStruct, 0);	//pobierz aktualn¹ datê
					RTC_ActualCallendarStruct.DAY++;
					if (RTC_ActualCallendarStruct.DAY > 7)	//
						RTC_ActualCallendarStruct.DAY = 1;
					RTC_ActualCallendarStruct.MONTH = 1;
					RTC_ActualCallendarStruct.YEAR = 0;
					RTC_SetCalendar(&RTC_ActualCallendarStruct);	//aktualizuj datê
					break;
				case USTAW_ALARM_GODZINA:
					RTC_BudzikTemp.HOUR++;
					if (RTC_BudzikTemp.HOUR > 23)
						RTC_BudzikTemp.HOUR = 0;
					break;
				case USTAW_ALARM_MINUTA:
					RTC_BudzikTemp.MIN++;
					if (RTC_BudzikTemp.MIN > 59)
						RTC_BudzikTemp.MIN = 0;
					break;
				case ODCZYT_ALARMU:
					//wyjscie z tego trybu do trybu ZEGAR po opoznieniu czasowym TimerOA
					w++;
					if (w>6)
						w = 0;
					TimerOA = CZAS_OA;		//ustaw czas wyswietlania informacji o alarmach
					break;
				case USTAW_KALIBRACJA:
					break;
				default:
					break;

			}
			Buzzer_init(&BuzzerSelect);
			Buzzer_start();
		}

		EXTI_ClearITPendingBit(BUTTON_BLACK_EXTI);
	}

}

/*******************************************************************************
* Function Name  : TIM1_BRK_IRQHandler
* Description    : This function handles TIM1 Break interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : TIM1_UP_IRQHandler
* Description    : This function handles TIM1 overflow and update interrupt 
*                  request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{

	if(TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET)
	{

	    // Clear IT pending bit 
	    TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
	}
}

/*******************************************************************************
* Function Name  : TIM1_TRG_COM_IRQHandler
* Description    : This function handles TIM1 Trigger and Commutation interrupts 
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : TIM1_CC_IRQHandler
* Description    : This function handles TIM1 capture compare interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : TIM2_IRQHandler
* Description    : freq generator for buzzer
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
	if(TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
	{
//		GPIO_WriteBit(BUZZER_PORT, BUZZER, (BitAction)(1-GPIO_ReadOutputDataBit(BUZZER_PORT, BUZZER)));
		GPIO_WriteBit(BUZZER_PORT, BUZZER, Bit_SET);

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
	}
	else if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET)
	{
		GPIO_WriteBit(BUZZER_PORT, BUZZER, Bit_RESET);
		TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
	}
}

/*******************************************************************************
* Function Name  : TIM3_IRQHandler
* Description    : odswierzanie co 200Hz/3 na parê cyfr
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{

	if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
	{

		TIM2->CCR1 = ((uint32_t)TIM2->CCR1 *98 )/100;	//zmniejszaj wypelnienie z czasem

		Tmux++;
		if (Tmux > 2)
			Tmux = 0;

    	switch(eTrybPracy)
    	{
    		case USTAW_ZEGAR_GODZINA:
    			Wyswietl_ustaw_zegar_godzina(&RTC_ActualTimeStruct);
    			break;

    		case USTAW_ZEGAR_MINUTA:
    			Wyswietl_ustaw_zegar_minuta(&RTC_ActualTimeStruct);
    			break;

    		case USTAW_ZEGAR_WDAY:
    			Wyswietl_ustaw_zegar_dzientyg(&RTC_ActualCallendarStruct);
    			break;

    		case USTAW_ALARM_GODZINA:
    			Wyswietl_ustaw_alarm_godzina(&RTC_BudzikTemp);
    			break;

    		case USTAW_ALARM_MINUTA:
    			Wyswietl_ustaw_alarm_minuta(&RTC_BudzikTemp);
    			break;

    		case ODCZYT_ALARMU:
    			Wyswietl_odczyt_alarmu(w);
    			break;

    		case ZEGAR:
    		default:
    			Wyswietl_czas(&RTC_ActualTimeStruct);
    			break;

    	}

		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
	}
}

/*******************************************************************************
* Function Name  : TIM4_IRQHandler
* Description    : This function handles TIM4 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
	BuzzerTypeDef BuzzerStruct;;

	if(TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
	{
		if (Muzyka <= 0)
		{
			TIM_Cmd(TIM2, DISABLE);	//wylacz dzwiek buzzera
			TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
			GPIO_WriteBit(BUZZER_PORT, BUZZER, Bit_RESET);	//stan niski na wyj. Buzzer'a

			TIM_Cmd(TIM4, DISABLE);	//odmierzaj czas
			TIM4->CNT = 0;

		}
		else
		{
			BuzzerStruct.FREQ = melodie[Muzyka][idx_nuta_dzwiek];
			BuzzerStruct.PERIOD = pelna_nuta/melodie[Muzyka][idx_nuta_dzwiek+1];
			Buzzer_init(&BuzzerStruct);
			idx_nuta_dzwiek +=2;
			if ( melodie[Muzyka][idx_nuta_dzwiek] == end)
				Muzyka = 0;
		}
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
	}//end TIM_GetITStatus

}

/*******************************************************************************
* Function Name  : I2C1_EV_IRQHandler
* Description    : This function handles I2C1 Event interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : I2C1_ER_IRQHandler
* Description    : This function handles I2C1 Error interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : I2C2_EV_IRQHandler
* Description    : This function handles I2C2 Event interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : I2C2_ER_IRQHandler
* Description    : This function handles I2C2 Error interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : SPI1_IRQHandler
* Description    : This function handles SPI1 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : SPI2_IRQHandler
* Description    : This function handles SPI2 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : USART1_IRQHandler
* Description    : This function handles USART1 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : USART2_IRQHandler
* Description    : Obsluga RS485 - manipulatory
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : USART3_IRQHandler
* Description    : This function handles USART3 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
}

/*******************************************************************************
* Function Name  : EXTI15_10_IRQHandler
* Description    : This function handles External lines 15 to 10 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{

	if(EXTI_GetITStatus(EXTI_Line10) != RESET)
	{
		//czsyszczenie flagi przerwania
		EXTI_ClearITPendingBit(EXTI_Line10);
	}
	if(EXTI_GetITStatus(EXTI_Line11) != RESET)
	{
		//czsyszczenie flagi przerwania
		EXTI_ClearITPendingBit(EXTI_Line11);
	}
	if(EXTI_GetITStatus(EXTI_Line12) != RESET)
	{
		//czsyszczenie flagi przerwania
		EXTI_ClearITPendingBit(EXTI_Line12);
	}
}
/*******************************************************************************
* Function Name  : RTCAlarm_IRQHandler
* Description    : This function handles RTC Alarm interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{

	if(RTC_GetITStatus(RTC_IT_ALR) != RESET)
	{

		EXTI_ClearITPendingBit(RTC_IT_ALR);
	}
}
/*******************************************************************************
* Function Name  : USBWakeUp_IRQHandler
* Description    : This function handles USB WakeUp interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
}

/******************* (C) COPYRIGHT 2007 STMicroelectronics *****END OF FILE****/
